/*
 * Copyright (c) Shadow client, 0x150, Saturn5VFive 2022. All rights reserved.
 */

package net.shadow.client.feature.command.impl;

import net.shadow.client.feature.command.Command;
import net.shadow.client.feature.command.exception.CommandException;
import net.shadow.client.feature.module.ModuleRegistry;
import net.shadow.client.feature.module.impl.exploit.SkinChangeExploit;
import net.shadow.client.helper.Texture;
import net.shadow.client.helper.util.Utils;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

public class SkinExploit extends Command {
    public SkinExploit() {
        super("SkinExploit", "Config for the SkinExploit module", "skinexploit");
    }

    @Override
    public String[] getSuggestions(String fullCommand, String[] args) {
        if (args.length == 1) {
            return new String[]{"(skin url)"};
        }
        return super.getSuggestions(fullCommand, args);
    }

    @Override
    public void onExecute(String[] args) throws CommandException {
        validateArgumentsLength(args, 1);
        URI uri;
        try {
            uri = new URI(String.join(" ", args));
        } catch (Exception ignored) {
            error("URL invalid");
            return;
        }
        byte[] in;
        try {
            HttpClient hc = HttpClient.newBuilder().followRedirects(HttpClient.Redirect.ALWAYS).build();
            HttpRequest hrc = HttpRequest.newBuilder().uri(uri).header("User-Agent", "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:98.0) Gecko/20100101 Firefox/98.0").build();
            HttpResponse<byte[]> is = hc.send(hrc, HttpResponse.BodyHandlers.ofByteArray());
            in = is.body();
        } catch (Exception e) {
            error("Image load failed: " + e.getMessage());
            e.printStackTrace();
            return;
        }
        try {
            ByteArrayInputStream bais = new ByteArrayInputStream(in);
            BufferedImage bi = ImageIO.read(bais);
            if (bi == null) {
                throw new IllegalStateException("Invalid image data");
            }
            Texture e = new Texture("fakeskintex");
            Utils.registerBufferedImageTexture(e, bi);
            ModuleRegistry.getByClass(SkinChangeExploit.class).skinId = e;
            success("Set skin texture! Enable the module to change everyone's skin");
        } catch (Exception e) {
            error("Image parse failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
}
